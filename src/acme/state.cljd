(ns acme.state
  (:require ["package:flutter/material.dart" :as m]
            [cljd.flutter :as f]
            [acme.audio :as audio]))
;; FONTS

(def numeric-font "CourierPrimeSans")
(def default-font "Montserrat")
(def cabacus-font "Gaegu")

;; COLORS

(def colors
  (update-vals
   {:amber m.Colors/amber
    :blue-grey m.Colors/blueGrey
    :grey m.Colors/grey
    :light-blue-accent m.Colors/lightBlueAccent
    :purple-accent m.Colors/purpleAccent
    :light-green m.Colors/lightGreen}
   (fn [seed-color]
     {:seed-color seed-color
      :color-scheme (m/ColorScheme.fromSeed .seedColor seed-color)})))

(defonce !color-key (atom :amber))

(def !color (f/$ (colors (f/<! !color-key))))

;; STYLE

(def frame-width 6)

(def style-ratios {:narrow 3/2 :wide 5/3})

(defonce !style-ratio-key (atom :wide))

(def !style-ratio (f/$ (style-ratios (f/<! !style-ratio-key))))

;; SIZES

(def sizes-base {:small  {:height 36 :rod-width 12}
                 :medium {:height 42 :rod-width 14}
                 :large  {:height 48 :rod-width 16}})

(defonce !size-key (atom :large))

(def !size
  (f/$ (let [{:keys [height] :as size-props} (sizes-base (f/<! !size-key))]
         (->> (f/<! !style-ratio-key)
              style-ratios
              (* height)
              (assoc size-props :width)))))

;; DIGITS

(defonce !digits
  (add-watch
   (atom [])
   :!digits
   (fn [_ _ old new]
     (when (= (count old) (count new))
       (let [changed-index (count (take-while true? (map = old new)))]
         (when (< changed-index (count new))
           (let [old-digit (get old changed-index)
                 new-digit (get new changed-index)
                 top-changed (not= (quot old-digit 5) (quot new-digit 5))
                 bottom-changed (not= (mod old-digit 5) (mod new-digit 5))]
             (audio/play-bead-async (+ (if top-changed 1 0)
                                       (if bottom-changed 1 0))))))))))

(defonce !seen-length
  (add-watch (atom 0)
             :!seen-length
             (fn [_ _ old-length new-length]
               (when (not= old-length new-length)
                 (swap! !digits
                        (fn [^List {:flds [length] :as digits}]
                          (vec (concat (repeat (- new-length length) 0)
                                       digits))))))))

(def !seen-digits (f/$ (let [^List {:flds [length] :as digits} (f/<! !digits)]
                         (subvec digits (- length (f/<! !seen-length))))))

(defonce !num-hint? (atom true))
