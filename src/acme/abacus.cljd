(ns acme.abacus
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]
            ["dart:ui" :as ui]
            ["dart:core" :as dc]
            [cljd.flutter :as f]
            [acme.state :refer [!size !color frame-width]]))

(def bead
  (f/widget
   :watch [{:keys [width height]} !size]
   :width width :height height :padding {:horizontal 2}
   (m/Container .decoration (m/BoxDecoration))
   (f/widget
    :watch [{:keys [seed-color]} !color]
    :let [shade-color (m/Color.lerp seed-color m/Colors.black 0.07)]
    :get {{{:flds [onPrimaryContainer]} .-colorScheme} m/Theme}
    m/Container
    .decoration
    (m/ShapeDecoration
     .gradient (m/LinearGradient
                .begin m/Alignment.topCenter
                .end m/Alignment.bottomCenter
                .stops [0.0 0.46 0.54 1.0]
                .colors [seed-color seed-color shade-color shade-color]))
    .shape
    (m/BeveledRectangleBorder
     .borderRadius (m/BorderRadius.all
                    (m/Radius.elliptical (/ width 3) (dec (/ height 2))))
     .side (m/BorderSide .width 0.1
                         .color onPrimaryContainer
                         .strokeAlign m/BorderSide.strokeAlignCenter)))))

(defn rod [child]
  (f/widget
   (f/widget
    :get {{{:flds [surfaceContainerHighest]} .-colorScheme} m/Theme}
    (m/Container .decoration (m/BoxDecoration .color surfaceContainerHighest)
                 .clipBehavior m/Clip.antiAlias))
   (m/Stack .alignment m/Alignment.topCenter
            .clipBehavior m/Clip.antiAlias)
   .children
   [(f/widget
     (f/widget :watch [{:keys [rod-width]} !size] :width rod-width)
     :get {{{:flds [onSurface outline]} .-colorScheme} m/Theme}
     :get [:rod3?]
     m/Container
     .decoration
     m/BoxDecoration
     .color
     (.withOpacity (if rod3? onSurface outline) 0.5))
    child]))

(def bead-animation-duration (dc/Duration .milliseconds 400))
(def bead-animation-curve m/Curves.easeOutExpo)

(def upper-rod
  (f/widget
   (f/widget
    :watch [{:keys [width height]} !size]
    :width width :height (* 1.5 height))
   (m/Stack .alignment m/Alignment.center)
   .children
   [(rod
     (f/widget
      :watch [digit (atom 1) :as !digit]
      (m/AnimatedAlign
       .alignment (if (< digit 5)
                    m/Alignment.topCenter
                    m/Alignment.bottomCenter)
       .duration bead-animation-duration
       .curve bead-animation-curve)
      (m/GestureDetector
       ; TODO change access
       .onTapDown (fn [_]
                    (s/HapticFeedback.lightImpact)
                    (swap! !digit #((if (< % 5) + -) % 5))))
      bead))
    ; TODO hint number here
    ]))

(def lower-rod-reference [[1 2 3 4]
                          [0 2 3 4]
                          [0 1 3 4]
                          [0 1 2 4]
                          [0 1 2 3]
                          [6 7 8 9]
                          [5 7 8 9]
                          [5 6 8 9]
                          [5 6 7 9]
                          [5 6 7 8]])

(def lower-rod
  (f/widget
   (f/widget
    :watch [{:keys [width height]} !size]
    :width width :height (* 4.5 height))
   :watch [digit (atom 1) :as !digit]
   (rod
    (m/Column
     .mainAxisAlignment m/MainAxisAlignment.end
     .children
     (map
      (fn [bead-idx]
        (f/widget
         (m/AnimatedSlide
          .offset (ui/Offset 0 (if (< bead-idx (mod digit 5)) -0.5 0))
          .duration bead-animation-duration
          .curve bead-animation-curve)
         (m/GestureDetector
       ; TODO change access
          .onTapDown (fn [_]
                       (s/HapticFeedback.lightImpact)
                       (swap! !digit
                              #(get-in lower-rod-reference [% bead-idx]))))
         bead))
      (range 4))))))

(def dot-beam
  (f/widget
   (f/widget :watch [{:keys [width]} !size] :width width :height frame-width)
   :get [:rod3?]
   :when rod3?
   m/Center
   (m/Container .width 3 .height 3)
   .decoration
   (m/BoxDecoration .color m/Colors.white .shape m/BoxShape.circle)))

(def digit-widget
  (f/widget
   :bind {:rev-idx 2}
   :get [:rev-idx]
   :bind {:rod3? (= 2 (mod rev-idx 3))}
   m/Column
   .children [upper-rod dot-beam lower-rod]))
