(ns acme.abacus
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]
            ["dart:ui" :as ui]
            ["dart:core" :as dc]
            [cljd.flutter :as f]
            [acme.state :refer [!size !color !digits frame-width]]))

(def bead
  (f/widget
   :watch [{:keys [width height]} !size]
   :width width :height height :padding {:horizontal 2}
   (m/Container .decoration (m/BoxDecoration))
   (f/widget
    :watch [{:keys [seed-color]} !color]
    :let [shade-color (m/Color.lerp seed-color m/Colors.black 0.07)]
    :get {{{:flds [onPrimaryContainer]} .-colorScheme} m/Theme}
    m/Container
    .decoration
    (m/ShapeDecoration
     .gradient (m/LinearGradient
                .begin m/Alignment.topCenter
                .end m/Alignment.bottomCenter
                .stops [0.0 0.46 0.54 1.0]
                .colors [seed-color seed-color shade-color shade-color]))
    .shape
    (m/BeveledRectangleBorder
     .borderRadius (m/BorderRadius.all
                    (m/Radius.elliptical (/ width 3) (dec (/ height 2))))
     .side (m/BorderSide .width 0.1
                         .color onPrimaryContainer
                         .strokeAlign m/BorderSide.strokeAlignCenter)))))

(defn rod [child]
  (f/widget
   (f/widget
    :get {{{:flds [surfaceContainerHighest]} .-colorScheme} m/Theme}
    (m/Container
     .decoration (m/BoxDecoration
                  .color surfaceContainerHighest
                  .border (m/Border.all .width 0
                                        .color surfaceContainerHighest))))
   (m/Stack .alignment m/Alignment.topCenter .clipBehavior m/Clip.antiAlias)
   .children
   [(f/widget
     (f/widget :watch [{:keys [rod-width]} !size] :width rod-width)
     :get {{{:flds [onSurface outline]} .-colorScheme} m/Theme}
     :get [:idx :rod3?s]
     m/Container
     .decoration
     m/BoxDecoration
     .color
     (.withOpacity (if (rod3?s idx) onSurface outline) 0.5))
    child]))

(def bead-animation-duration (dc/Duration .milliseconds 400))
(def bead-animation-curve m/Curves.easeOutExpo)

(def upper-rod
  (f/widget
   (f/widget
    :watch [{:keys [width height]} !size] :width width :height (* 1.5 height))
   (m/Stack .alignment m/Alignment.center)
   .children
   [(rod
     (f/widget
      :get [:!seen-digits :idx]
      :watch [^List {seen-length .-length digit idx} !seen-digits]
      (m/AnimatedAlign
       .alignment (if (< digit 5)
                    m/Alignment.topCenter
                    m/Alignment.bottomCenter)
       .duration bead-animation-duration
       .curve bead-animation-curve)
      (m/GestureDetector
       .onTapDown (fn [_]
                    (s/HapticFeedback.lightImpact)
                    (swap! !digits
                           (fn [^List {:flds [length] :as digits}]
                             (update digits
                                     (+ idx (- length seen-length))
                                     #((if (< % 5) + -) % 5))))))
      bead))
    ; TODO hint number here
    ]))

(def lower-rod-reference [[1 2 3 4]
                          [0 2 3 4]
                          [0 1 3 4]
                          [0 1 2 4]
                          [0 1 2 3]
                          [6 7 8 9]
                          [5 7 8 9]
                          [5 6 8 9]
                          [5 6 7 9]
                          [5 6 7 8]])

(def lower-rod
  (f/widget
   (f/widget :watch [{:keys [width height]} !size]
             :width width :height (* 4.5 height))
   (rod
    (m/Column
     .mainAxisAlignment m/MainAxisAlignment.end
     .children
     (map
      (fn [bead-idx]
        (f/widget
         :get [:!seen-digits :idx]
         :watch [^List {seen-length .-length digit idx} !seen-digits]
         (m/AnimatedSlide
          .offset (ui/Offset 0 (if (< bead-idx (mod digit 5)) -0.5 0))
          .duration bead-animation-duration
          .curve bead-animation-curve)
         (m/GestureDetector
          .onTapDown
          (fn [_]
            (s/HapticFeedback.lightImpact)
            (swap! !digits
                   (fn [^List {:flds [length] :as digits}]
                     (update digits
                             (+ idx (- length seen-length))
                             #(get-in lower-rod-reference [% bead-idx]))))))
         bead))
      (range 4))))))

(def dot-beam
  (f/widget
   (f/widget :watch [{:keys [width]} !size] :width width)
   :get [:idx :rod3?s] :when (rod3?s idx)
   m/Center
   (m/Container .width 3 .height 3)
   .decoration
   (m/BoxDecoration .color m/Colors.white .shape m/BoxShape.circle)))

(def abacus
  (m/LayoutBuilder
   .builder
   (f/build
    [^m/BoxConstraints {:flds [maxWidth]}]
    (f/widget
     :watch [{:keys [width]} !size]
     :let [seen-length (quot (- maxWidth (* 2 frame-width) 2) width)
           _ (swap! !digits
                    (fn [^List {:flds [length] :as digits}]
                      (vec (concat (repeat (- seen-length length) 0) digits))))]
     :bind {:!seen-digits
            (f/$ (let [^List {:flds [length] :as digits} (f/<! !digits)]
                   (subvec digits (- length seen-length))))})
    (f/widget
     (m/Container
      .decoration (m/BoxDecoration
                   .color m/Colors.black
                   .borderRadius (m/BorderRadius.all (m/Radius.circular 6))))
     :padding frame-width
     :get [:!seen-digits]
     :watch [^List {:flds [length]} !seen-digits]
     :bind {:rod3?s (mapv #(= 0 (mod (- length %) 3)) (range length))}
     (m/Column .mainAxisSize m/MainAxisSize.min)
     .children
     (letfn [(bead-row [widget]
               (f/widget
                (m/ClipRRect .borderRadius (m/BorderRadius.circular 3))
                (m/Row .mainAxisSize m/MainAxisSize.min)
                .children
                (map #(f/widget :bind {:idx %} widget) (range length))))]
       [(bead-row upper-rod)
        (f/widget
         :height frame-width
         (m/Row .mainAxisSize m/MainAxisSize.min)
         .children
         (map #(f/widget :bind {:idx %} dot-beam) (range length)))
        (bead-row lower-rod)])))))
