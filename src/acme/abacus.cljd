(ns acme.abacus
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]
            ["dart:ui" :as ui]
            [cljd.flutter :as f]
            [acme.state :as state]
            [acme.audio :as audio]))

(def bead
  (f/widget
   :get [:bead-width :bead-height :bead-color :border-color]
   :width bead-width :height bead-height :padding {:horizontal 2}
   (m/Container .decoration (m/BoxDecoration))
   (f/widget
    :let [shade-color (m/Color.lerp bead-color m/Colors.black 0.07)]
    ;; WHY NO ALIAS
    (m/Container .clipBehavior m/Clip.antiAlias)
    .decoration
    (m/ShapeDecoration
     .gradient (m/LinearGradient
                .begin m/Alignment.topCenter
                .end m/Alignment.bottomCenter
                .stops [0.0 0.46 0.54 1.0]
                .colors [bead-color bead-color shade-color shade-color]))
    .shape
    (m/BeveledRectangleBorder
     .borderRadius (m/BorderRadius.all
                    (m/Radius.elliptical (/ bead-width 3)
                                         (dec (/ bead-height 2))))
     .side (m/BorderSide .width 0.1
                         .color border-color
                         .strokeAlign m/BorderSide.strokeAlignCenter)))))

(def used-bead
  (f/widget
   :get [:bead-dimensions-cell]
   :watch [{:keys [width height]} bead-dimensions-cell
           {bead-color :seed-color
            ^m/ColorScheme {border-color .-onPrimaryContainer} :color-scheme}
           state/color-cell]
   :bind {:bead-width width
          :bead-height height
          :bead-color bead-color
          :border-color border-color}
   bead))

(defn rod [child]
  (f/widget
   (f/widget
    :get {{{:flds [surfaceContainerHighest]} .-colorScheme} m/Theme}
    (m/Container
     .decoration (m/BoxDecoration
                  .color surfaceContainerHighest
                  .border (m/Border.all .width 0
                                        .color surfaceContainerHighest))))
   (m/Stack .alignment m/Alignment.topCenter)
   .children
   [(f/widget
     (f/widget
      :get [:bead-dimensions-cell]
      :watch [{:keys [rod-width]} bead-dimensions-cell]
      :width rod-width)
     :get {{{:flds [onSurface outline]} .-colorScheme} m/Theme}
     :get [:idx :rod3?s]
     m/Container
     .decoration
     m/BoxDecoration
     .color
     (.withOpacity (if (rod3?s idx) onSurface outline) 0.5))
    child]))

(def bead-animation-curve m/Curves.easeOutExpo)

(def upper-rod
  (f/widget
   (f/widget
    :get [:bead-dimensions-cell]
    :watch [{:keys [width height]} bead-dimensions-cell]
    :width width
    :height (* 1.5 height))
   :get [:idx :seen-digits-cell :settings-atom]
   :watch [{:keys [hint]} settings-atom]
   (m/Stack .alignment m/Alignment.center)
   .children
   (remove
    nil?
    [(rod
      (f/widget
       :get [:settings-atom]
       :watch [{digit idx} seen-digits-cell
               {speed-key :speed} settings-atom]
       :let [{{:keys [bead-animation]} speed-key} state/speeds]
       (m/AnimatedAlign
        .alignment (if (< digit 5)
                     m/Alignment.topCenter
                     m/Alignment.bottomCenter)
        .duration bead-animation
        .curve bead-animation-curve)
       (f/widget
        :get [:settings-atom :digits-atom]
        :watch [^List {seen-length .-length} seen-digits-cell
                {:keys [speed vibration sound]} settings-atom]
        (m/GestureDetector
         .onTapDown
         (fn [_]
           (when vibration (s/HapticFeedback.lightImpact))
           (swap! digits-atom update :all
                  (fn [^List {:flds [length] :as digits}]
                    (when sound
                      (-> (get-in state/speeds [speed :bead-sound-interval])
                          audio/play-bead-sound))
                    (let [raw-idx (+ idx (- length seen-length))]
                      (update digits raw-idx #((if (< % 5) + -) % 5)))))))
        used-bead)))
     (when hint
       (f/widget
        m/IgnorePointer
        :watch [{digit idx} seen-digits-cell]
        :get {{{:flds [bodyLarge]} .-textTheme} m/Theme}
        (m/Text
         (str digit)
         .style (.copyWith bodyLarge
                           .fontFamily state/numeric-font
                           ; .color m/Colors.black
                           .shadows [(m/Shadow .color m/Colors.white
                                               .blurRadius 10)]))))])))

(def lower-rod-reference [[1 2 3 4]
                          [0 2 3 4]
                          [0 1 3 4]
                          [0 1 2 4]
                          [0 1 2 3]
                          [6 7 8 9]
                          [5 7 8 9]
                          [5 6 8 9]
                          [5 6 7 9]
                          [5 6 7 8]])

(def lower-rod
  (f/widget
   (f/widget
    :get [:bead-dimensions-cell]
    :watch [{:keys [width height]} bead-dimensions-cell]
    :width width :height (* 4.5 height))
   (rod
    (m/Column
     .mainAxisAlignment m/MainAxisAlignment.end
     .children
     (for [bead-idx (range 4)]
       (f/widget
        :get [:idx :seen-digits-cell :settings-atom :digits-atom]
        :watch [^List {seen-length .-length, digit idx} seen-digits-cell
                {:keys [speed vibration sound]} settings-atom]
        :let [{{:keys [bead-animation]} speed} state/speeds]
        (m/AnimatedSlide
         .offset (ui/Offset 0 (if (< bead-idx (mod digit 5)) -0.5 0))
         .duration bead-animation
         .curve bead-animation-curve)
        (m/GestureDetector
         .onTapDown
         (fn [_]
           (when vibration (s/HapticFeedback.lightImpact))
           (swap! digits-atom update :all
                  (fn [^List {:flds [length] :as digits}]
                    (when sound
                      (-> (get-in state/speeds [speed :bead-sound-interval])
                          audio/play-bead-sound))
                    (let [raw-idx (+ idx (- length seen-length))]
                      (update digits
                              raw-idx
                              #(get-in lower-rod-reference [% bead-idx])))))))
        used-bead))))))

(def dot-beam
  (f/widget
   (f/widget
    :get [:bead-dimensions-cell]
    :watch [{:keys [width]} bead-dimensions-cell]
    :width width)
   :get [:idx :rod3?s] :when (rod3?s idx)
   m/Center
   (m/Container .width 3 .height 3)
   .decoration
   (m/BoxDecoration .color m/Colors.white .shape m/BoxShape.circle)))

(def abacus
  (m/LayoutBuilder
   .builder
   (f/build
    [^m/BoxConstraints {:flds [maxWidth]}]
    (f/widget
     :get [:bead-dimensions-cell :digits-atom]
     :watch [{:keys [width]} bead-dimensions-cell]
     :let [_
           ; update number of view digits after the widget tree has been built
           (m/WidgetsBinding.instance.addPostFrameCallback
            (fn [_]
              (swap!
               digits-atom
               (fn [{:keys [all]}]
                 (let [view (quot (- maxWidth (* 2 state/frame-width) 2) width)
                       length (count all)
                       all (vec (concat (repeat (- view length) 0) all))]
                   {:all all
                    :view view})))))])
    (f/widget
     (m/Container
      .decoration (m/BoxDecoration
                   .color m/Colors.black
                   .borderRadius (m/BorderRadius.all (m/Radius.circular 6))))
     :padding state/frame-width
     :get [:seen-digits-cell]
     :watch [^List {:flds [length]} seen-digits-cell]
     :bind {:rod3?s (mapv #(= 0 (mod (- length %) 3)) (range length))}
     (m/Column .mainAxisSize m/MainAxisSize.min)
     .children
     (letfn [(bead-row [widget]
               (f/widget
                (m/ClipRRect .borderRadius (m/BorderRadius.circular 3))
                (m/Row .mainAxisSize m/MainAxisSize.min)
                .children
                (for [idx (range length)]
                  (f/widget :bind {:idx idx} widget))))]
       [(bead-row upper-rod)
        (f/widget
         :height state/frame-width
         (m/Row .mainAxisSize m/MainAxisSize.min)
         .children
         (for [idx (range length)]
           (f/widget :bind {:idx idx} dot-beam)))
        (bead-row lower-rod)])))))
