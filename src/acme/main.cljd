(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]
            ["dart:ui" :as ui]
            ["dart:core" :as dc]
            ["dart:async" :as async]
            [cljd.flutter :as f]
            [acme.state :refer [!color !digits]]
            [acme.abacus :refer [abacus]]))

; TODO test this macro
(defmacro await-duration [& exprs]
  `(await (async/Future.delayed (dc/Duration ~@exprs))))

(def cabacus-button
  (f/widget
   :let [jump-letter-duration (Duration .milliseconds 75)
         jump-letters
         (fn [letters]
           (-> (async/Stream.periodic jump-letter-duration
                                      #(get-in letters [% :controller]))
               (.take (.-length ^List letters))
               (.forEach #(do (await (.forward ^m/AnimationController %))
                              (.reverse ^m/AnimationController %)))))]
   :vsync vsync
   :let [!disposed? (atom false)]
   :managed [letters (doto
                      (vec (for [c "CABACUS"]
                             {:letter c
                              :controller (m/AnimationController
                                           .duration jump-letter-duration
                                           .vsync vsync)}))
                       (as->
                        letters
                        (future
                          (let [reversed-letters (vec (reverse letters))]
                            (doseq [interval (repeatedly #(+ 45 (rand-int 31)))
                                    :while (not @!disposed?)]
                              (await (async/Future.delayed
                                      (dc/Duration .seconds interval)))
                              (jump-letters reversed-letters))))))
             :dispose (#(do (reset! !disposed? true)
                            (doseq [{:keys [controller]} %]
                              (.dispose ^m/AnimationController controller))))]
   (m/TextButton
    .onPressed (fn []
                 (jump-letters letters)
                 (s/HapticFeedback.heavyImpact)
                 (swap! !digits (fn [^List {:flds [length]}]
                                  (vec (repeat length 0))))))
   :padding {:horizontal 12}
   (m/Row .mainAxisSize m/MainAxisSize.min)
   .children
   (for [{:keys [letter controller]} letters]
     (f/widget
      (m/SlideTransition
       .position (.drive ^m/AnimationController controller
                         (.chain (m/Tween .begin ui/Offset.zero
                                          .end (ui/Offset 0 -0.1))
                                 (m/CurveTween .curve m/Curves.easeOutQuad))))
      :get {{{:flds [headlineMedium]} .-textTheme
             {:flds [primary]} .-colorScheme} m/Theme}
      (m/Text letter
              .style (.copyWith headlineMedium
                                .color primary
                                .fontWeight m/FontWeight.bold))))))

(defn main []
  (m/WidgetsFlutterBinding.ensureInitialized)
  (s/SystemChrome.setPreferredOrientations
   [s/DeviceOrientation.landscapeLeft s/DeviceOrientation.landscapeRight])
  (s/SystemChrome.setSystemUIOverlayStyle
   (s/SystemUiOverlayStyle .systemNavigationBarColor m/Colors.transparent))
  (s/SystemChrome.setEnabledSystemUIMode s/SystemUiMode.immersiveSticky)
  (f/run
   (f/widget
    :watch [{^m/ColorScheme {:flds [primary] :as color-scheme} :color-scheme}
            !color]
    (m/MaterialApp
     .title "Cabacus School"
     ; disable overscroll effects
     .scrollBehavior (.copyWith (m/ScrollBehavior) .overscroll false)
     .theme (m/ThemeData
             .colorScheme color-scheme
             .fontFamily "Montserrat"
             .iconTheme (m/IconThemeData .color primary)
             .splashFactory m/NoSplash.splashFactory
             .useMaterial3 true)))
   .home
   (f/widget
    :get {{{:flds [secondaryContainer]} .-colorScheme} m/Theme}
    (m/Scaffold
     .backgroundColor secondaryContainer
     .appBar (m/AppBar .backgroundColor secondaryContainer
                       .title cabacus-button)))
   .body
   m/SafeArea
   m/Center
   abacus))

