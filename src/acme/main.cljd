(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]
            ["dart:ui" :as ui]
            ["dart:async" :as async]
            [cljd.flutter :as f]
            [acme.state :as state :refer [!color cabacus-font]]
            [acme.abacus :refer [abacus]]
            [acme.audio :as audio]
            [acme.utils :as utils]))

(def cabacus-button
  (let [!disposed? (atom false)]
    (f/widget
     :let [jump-letter-duration (Duration .milliseconds 75)
           jump-letters
           (fn [letters]
             (-> (async/Stream.periodic jump-letter-duration
                                        #(get-in letters [% :controller]))
                 (.take (.-length ^List letters))
                 (.forEach #(do (await (.forward ^m/AnimationController %))
                                (.reverse ^m/AnimationController %)))))]
     :vsync vsync
     :managed [letters
               (doto
                (vec (for [c "CABACUS"]
                       {:letter c
                        :controller (m/AnimationController
                                     .duration jump-letter-duration
                                     .vsync vsync)}))
                 (as-> letters
                       (future
                         (let [reversed-letters (vec (reverse letters))]
                           (doseq [interval (repeatedly #(+ 45 (rand-int 31)))
                                   :while (not @!disposed?)]
                             (utils/await-duration .seconds interval)
                             (jump-letters reversed-letters))))))
               :dispose (#(do (reset! !disposed? true)
                              (doseq [{:keys [controller]} %]
                                (.dispose ^m/AnimationController controller))))]
     (m/TextButton
      .onPressed (fn []
                   (jump-letters letters)
                   (s/HapticFeedback.heavyImpact)
                   (doseq [[i d] (map-indexed list (:digits @state/!digits-info)) :when (pos-int? d)]
                     (swap! state/!digits-info
                            #(->  (assoc % :last-index-change i)
                                  (assoc-in [:digits i] 0)))
                     (utils/await-duration .milliseconds 20))
                   nil))
     :padding {:horizontal 12}
     (m/Row .mainAxisSize m/MainAxisSize.min)
     .children
     (for [{:keys [letter controller]} letters]
       (f/widget
        (m/SlideTransition
         .position (.drive ^m/AnimationController controller
                           (.chain (m/Tween .begin ui/Offset.zero
                                            .end (ui/Offset 0 -0.1))
                                   (m/CurveTween .curve m/Curves.easeOutQuad))))
        :get {{{:flds [headlineMedium]} .-textTheme
               {:flds [primary]} .-colorScheme} m/Theme}
        (m/Text letter
                .style (.copyWith headlineMedium
                                  .color primary
                                  .fontWeight m/FontWeight.bold
                                  .fontFamily cabacus-font)))))))

(defn main []
  (m/WidgetsFlutterBinding.ensureInitialized)
  (s/SystemChrome.setPreferredOrientations
   [s/DeviceOrientation.landscapeLeft s/DeviceOrientation.landscapeRight])
  (s/SystemChrome.setSystemUIOverlayStyle
   (s/SystemUiOverlayStyle .systemNavigationBarColor m/Colors.transparent))
  (s/SystemChrome.setEnabledSystemUIMode s/SystemUiMode.immersiveSticky)
  (audio/preload-bead-audio)
  (f/run
   (f/widget
    :watch [{^m/ColorScheme {:flds [primary] :as color-scheme} :color-scheme}
            !color]
    (m/MaterialApp
     .title "Cabacus School"
     ; disable overscroll effects
     .scrollBehavior (.copyWith (m/ScrollBehavior) .overscroll false)
     .theme (m/ThemeData
             .colorScheme color-scheme
             .fontFamily "Montserrat"
             .iconTheme (m/IconThemeData .color primary)
             .splashFactory m/NoSplash.splashFactory
             .useMaterial3 true)))
   .home
   (f/widget
    :get {{{:flds [secondaryContainer]} .-colorScheme} m/Theme}
    (m/Scaffold
     .backgroundColor secondaryContainer
     .appBar (m/AppBar .backgroundColor secondaryContainer
                       .title cabacus-button
                       .titleSpacing 0)))
   .body
   m/SafeArea
   m/Center
   abacus))

