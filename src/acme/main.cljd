(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]
            [cljd.flutter :as f]))

;; COLORS

(def colors
  (update-vals
   {:amber m.Colors/amber
    :blue-grey m.Colors/blueGrey
    :grey m.Colors/grey
    :light-blue-accent m.Colors/lightBlueAccent
    :purple-accent m.Colors/purpleAccent
    :light-green m.Colors/lightGreen}
   (fn [seed-color]
     {:seed-color seed-color
      :color-scheme (m/ColorScheme.fromSeed .seedColor seed-color)})))

(defonce !color-key (atom :amber))

(def !color (f/$ (colors (f/<! !color-key))))

;; STYLE

(def style-ratios (update-vals {:narrow 3/2 :wide 5/3} double))

(defonce !style-ratio-key (atom :wide))

(def !style-ratio (f/$ (style-ratios (f/<! !style-ratio-key))))

;; SIZES

(def sizes-base {:small  {:height 36 :rod-width 12}
                 :medium {:height 42 :rod-width 14}
                 :large  {:height 48 :rod-width 16}})

(defonce !size-key (atom :medium))

(def !size
  (f/$ (let [{:keys [height] :as size-props} (sizes-base (f/<! !size-key))]
         (->> (f/<! !style-ratio-key)
              style-ratios
              (* height)
              (assoc size-props :width)))))

(def bead
  (f/widget
   :watch [{:keys [width height]} !size]
   :width width :height height :padding {:horizontal 2}
   (m/Container .decoration (m/BoxDecoration))
   (f/widget
    :watch [{:keys [seed-color]} !color]
    :let [shade-color (m/Color.lerp seed-color m/Colors.black 0.07)]
    :get {{{:flds [onPrimaryContainer]} .-colorScheme} m/Theme}
    m/Container
    .decoration
    (m/ShapeDecoration
     .gradient (m/LinearGradient
                .begin m/Alignment.topCenter
                .end m/Alignment.bottomCenter
                .stops [0 0.46 0.54 1]
                .colors [seed-color seed-color shade-color shade-color]))
    .shape
    (m/BeveledRectangleBorder
     .borderRadius (m/BorderRadius.all
                    (m/Radius.elliptical (/ width 3) (dec (/ height 2))))
     .side (m/BorderSide .width 0.1
                         .color onPrimaryContainer
                         .strokeAlign m/BorderSide.strokeAlignCenter)))))

(defn main []
  (m/WidgetsFlutterBinding.ensureInitialized)
  (s/SystemChrome.setPreferredOrientations
   [s/DeviceOrientation.landscapeLeft s/DeviceOrientation.landscapeRight])
  (s/SystemChrome.setSystemUIOverlayStyle
   (s/SystemUiOverlayStyle .systemNavigationBarColor m/Colors.transparent))
  (s/SystemChrome.setEnabledSystemUIMode s/SystemUiMode.immersiveSticky)
  (f/run
   (f/widget
    :watch [{^m/ColorScheme {:flds [primary] :as color-scheme} :color-scheme}
            !color]
    (m/MaterialApp
     .title "Cabacus School"
     ; disable overscroll effects
     .scrollBehavior (.copyWith (m/ScrollBehavior) .overscroll false)
     .theme (m/ThemeData
             .colorScheme color-scheme
             .fontFamily "Montserrat"
             .iconTheme (m/IconThemeData .color primary)
             .splashFactory m/NoSplash.splashFactory
             .useMaterial3 true)))
   .home
   (f/widget
    :get {{{:flds [secondaryContainer]} .-colorScheme} m/Theme}
    (m/Scaffold
     .backgroundColor secondaryContainer
     .appBar (m/AppBar .backgroundColor secondaryContainer
                       .title (m/Text "Cabacus School"))))
   .body
   m/SafeArea
   ; m/Center
   bead
   #_(m/Text "Let's get coding!"
             .style (m/TextStyle
                     .color m.Colors/red
                     .fontSize 32.0))))
