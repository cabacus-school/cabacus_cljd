(ns acme.main
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter/services.dart" :as s]
   ["package:package_info_plus/package_info_plus.dart" :as package-info]
   [acme.abacus :as abacus]
   [acme.above-abacus :as above-abacus]
   [acme.audio :as audio]
   [acme.settings :as settings]
   [acme.state :as state]
   [cljd.flutter :as f]))

(defmacro resolve-with [type states value]
  `(^{:type-params [~type]} .resolveWith
    m/WidgetStateProperty
    #(when (.containsAll ^Set % ~states) ~value)))

(defn main []
  (m/WidgetsFlutterBinding.ensureInitialized)
  (s/SystemChrome.setPreferredOrientations
   [s/DeviceOrientation.landscapeLeft s/DeviceOrientation.landscapeRight])
  (s/SystemChrome.setSystemUIOverlayStyle
   (s/SystemUiOverlayStyle .systemNavigationBarColor m/Colors.transparent))
  (s/SystemChrome.setEnabledSystemUIMode s/SystemUiMode.immersiveSticky)

  ; workaround to aggressive tree-shaking
  (let [_ [audio/bead-sound-stream-subscription
           audio/audioplayers]])

  (let [package-info (await (package-info/PackageInfo.fromPlatform))]
    (f/run
     (f/widget
      :let [digits-atom (atom {:all [] :view 0})
            settings-atom (atom settings/initial-settings)

            seen-digits-cell
            (f/$ (let [{:keys [view] ^List {:flds [length] :as all} :all}
                       (f/<! digits-atom)]
                   (subvec all (- length view))))

            bead-dimensions-cell
            (f/$ (let [{:keys [bead-size bead-style]} (f/<! settings-atom)
                       ratio (state/bead-style-ratios bead-style)
                       bead-dimensions (state/sizes-base bead-size)
                       bead-width (* ratio (:height bead-dimensions))]
                   (assoc bead-dimensions :width bead-width)))]
      :bind {:digits-atom digits-atom
             :settings-atom settings-atom
             :bead-dimensions-cell bead-dimensions-cell
             :package-info package-info
             :seen-digits-cell seen-digits-cell}
      :watch [{^m/ColorScheme
               {:flds [primary onPrimary] :as color-scheme}
               :color-scheme} state/color-cell]
      (m/MaterialApp
       .title "Cabacus School"
     ; disable overscroll effects
       .scrollBehavior
       (.copyWith (m/ScrollBehavior) .overscroll false .scrollbars true)
       .theme
       (m/ThemeData
        .colorScheme color-scheme
        .fontFamily state/default-font
        .iconTheme (m/IconThemeData .color primary)
        .segmentedButtonTheme
        (m/SegmentedButtonThemeData
         .style
         (m/ButtonStyle
          .foregroundColor
          (resolve-with m/Color? [m/WidgetState.selected] onPrimary)
          .iconColor
          (resolve-with m/Color? [m/WidgetState.selected] onPrimary)
          .backgroundColor
          (resolve-with m/Color? [m/WidgetState.selected] primary)
          .visualDensity
          (m/VisualDensity .vertical 1)))
        .splashFactory m/NoSplash.splashFactory
        .highlightColor primary
        .useMaterial3 true)))
     .home
     (f/widget
      :get {{{:flds [secondaryContainer]} .-colorScheme} m/Theme}
      (m/Container .color secondaryContainer
                   .alignment m/Alignment.center))
     m/SafeArea
     m/Column
     .children
     [above-abacus/above-abacus (m/Spacer) abacus/abacus (m/Spacer)])))
